import { ContentBlock } from "./index.js";

// eslint-disable-next-line @typescript-eslint/no-namespace
export declare namespace ToolContentBlocks {
  /** Content block for a tool call */
  export interface ToolCallContentBlock extends ContentBlock {
    /** Type of the content block */
    type: "tool_call";
    /**
     * Tool call identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI tool call ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * The name of the tool being called
     */
    name: string;
    /**
     * The arguments passed to the tool
     */
    args: Record<string, unknown>;
    /**
     * The result of the tool call
     */
    callId: string;
  }

  /** Content block for a built-in web search tool call. */
  export interface SearchCallContentBlock extends ContentBlock {
    /** Type of the content block */
    type: "search_call";
    /**
     * Search call identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI search call ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * The search query used in the web search tool call
     */
    query?: string;
  }

  /** Content block for the result of a built-in search tool call */
  export interface SearchResultContentBlock extends ContentBlock {
    /** Type of the content block */
    type: "search_result";
    /**
     * The search result identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI search result ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * List of URLs returned by the web search tool call
     */
    urls?: string[];
  }

  /** Content block for a built-in code interpreter tool call. */
  export interface CodeInterpreterCallContentBlock extends ContentBlock {
    /** Type of the content block */
    type: "code_interpreter";
    /**
     * Code interpreter identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI code interpreter ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * The language of the code executed by the code interpreter tool call
     */
    language?: string;
    /**
     * The code to be executed by the code interpreter
     */
    code?: string;
  }

  /** Content block for the output of a singular code interpreter tool call */
  export interface CodeInterpreterOutput extends ContentBlock {
    /** Type of the content block */
    type: "code_interpreter_output";
    /**
     * The identifier of the code interpreter tool call, which can be either
     *  - generated by the provider (e.g., an OpenAI code interpreter output ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * The return code of the code interpreter tool call
     * Example: 0 for success, non-zero for failure
     */
    returnCode?: number;
    /**
     * Standard error output of the executed code
     */
    stderr?: string;
    /**
     * Standard output of the executed code
     */
    stdout?: string;
    /**
     * File IDs of the files created by the code interpreter tool call
     */
    fileIds?: string[];
  }

  /** Content block for the result of a code interpreter tool call */
  export interface CodeInterpreterResultContentBlock extends ContentBlock {
    /** Type of the content block */
    type: "code_interpreter_result";
    /**
     * The identifier of the code interpreter tool call, which can be either
     *  - generated by the provider (e.g., an OpenAI code interpreter result ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * The result of the code interpreter tool call
     */
    output: CodeInterpreterOutput[];
  }

  export type Standard =
    | ToolCallContentBlock
    | SearchCallContentBlock
    | SearchResultContentBlock
    | CodeInterpreterCallContentBlock
    | CodeInterpreterOutput
    | CodeInterpreterResultContentBlock;
}
