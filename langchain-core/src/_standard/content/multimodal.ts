import { ContentBlock } from "./index.js";

// eslint-disable-next-line @typescript-eslint/no-namespace
export declare namespace MultimodalContentBlocks {
  /** Content block for multimodal data */
  export interface DataContentBlock<
    TMetadata extends Record<string, unknown> = Record<string, unknown>
  > extends ContentBlock {
    /**
     * MIME type of the file. Required for base64 encoding.
     */
    mimeType?: string;
    /**
     * Metadata of the file
     */
    metadata?: TMetadata;
  }

  /** Content block for image data */
  export interface ImageContentBlock extends DataContentBlock {
    /**
     * Type of the content block
     */
    readonly type: "image";
    /**
     * Image content block identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI image block ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * ID of the image file. e.g. from the OpenAI file api
     */
    fileId?: string;
    /**
     * MIME type of the image file. Required for base64 encoding.
     */
    mimeType?: string;
    /**
     * URL of the image file
     */
    url?: string;
    /**
     * Base64 encoded data of the image file
     */
    base64?: string;
  }
  /** Content block for video data */
  export interface VideoContentBlock extends DataContentBlock {
    /**
     * Type of the content block
     */
    readonly type: "video";
    /**
     * Video content block identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI video block ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * ID of the video file. e.g. from the OpenAI file api
     */
    fileId?: string;
    /**
     * MIME type of the video file. Required for base64 encoding.
     */
    mimeType?: string;
    /**
     * URL of the video file
     */
    url?: string;
    /**
     * Base64 encoded data of the video file
     */
    base64?: string;
  }
  /** Content block for audio data */
  export interface AudioContentBlock extends DataContentBlock {
    /**
     * Type of the content block
     */
    readonly type: "audio";
    /**
     * Audio content block identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI audio block ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * ID of the audio file. e.g. from the OpenAI file api
     */
    fileId?: string;
    /**
     * MIME type of the audio file. Required for base64 encoding.
     */
    mimeType?: string;
    /**
     * URL of the audio file
     */
    url?: string;
    /**
     * Base64 encoded data of the audio file
     */
    base64?: string;
  }
  /** Content block for plain text data */
  export interface PlainTextContentBlock extends DataContentBlock {
    /**
     * Type of the content block
     */
    readonly type: "text-plain";
    /**
     * Plain text content block identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI file ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * ID of the file. e.g. from the OpenAI file api
     */
    fileId?: string;
    /**
     * MIME type of the file. Required for base64 encoding.
     */
    mimeType?: "text/plain";
    /**
     * URL of the plain text file
     */
    url?: string;
    /**
     * Base64 encoded data of the file
     */
    base64?: string;
    /**
     * Plaintext content. This is optional if the data is base64 encoded.
     */
    text?: string;
    /**
     * Title of the file, e.g. the title of a document
     */
    title?: string;
    /**
     * Context for the text, e.g. a description or a summary of the text's content
     */
    context?: string;
  }
  /** Content block for file data */
  export interface FileContentBlock extends DataContentBlock {
    /**
     * Type of the content block
     */
    readonly type: "file";
    /**
     * Search call identifier, which can be either
     *  - generated by the provider (e.g., an OpenAI search call ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * ID of the file. e.g. from the OpenAI file api
     */
    fileId?: string;
    /**
     * MIME type of the file. Required for base64 encoding.
     */
    mimeType?: string;
    /**
     * URL of the file
     */
    url?: string;
    /**
     * Base64 encoded data of the file
     */
    base64?: string;
  }

  export type Standard =
    | ImageContentBlock
    | VideoContentBlock
    | AudioContentBlock
    | PlainTextContentBlock
    | FileContentBlock;
}
