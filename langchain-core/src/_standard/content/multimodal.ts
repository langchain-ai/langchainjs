import { ContentBlock as BaseContentBlock } from "./base.js";

// eslint-disable-next-line @typescript-eslint/no-namespace
export declare namespace Multimodal {
  /** Content block for multimodal data */
  export interface Data<
    TMetadata extends Record<string, unknown> = Record<string, unknown>
  > extends BaseContentBlock {
    /**
     * MIME type of the file. Required for base64 encoding.
     */
    mimeType?: string;
    /**
     * Metadata of the file
     */
    metadata?: TMetadata;
    /**
     * Content block identifier for multimodal content, e.g. image, video, audio, file or plain text. This can be either:
     *  - generated by the provider (e.g., an OpenAI block ID)
     *  - generated by LangChain upon creation
     */
    id?: string;
    /**
     * ID of the image file. e.g. from the OpenAI file api
     */
    fileId?: string;
    /**
     * URL of the data file
     */
    url?: string;
    /**
     * Base64 encoded string or binary data of the data
     */
    data?: string | Uint8Array;
  }

  /** Content block for image data */
  export interface Image extends Data {
    /**
     * Type of the content block
     */
    readonly type: "image";
  }
  /** Content block for video data */
  export interface Video extends Data {
    /**
     * Type of the content block
     */
    readonly type: "video";
  }

  /** Content block for audio data */
  export interface Audio extends Data {
    /**
     * Type of the content block
     */
    readonly type: "audio";
  }

  /** Content block for plain text data */
  export interface PlainText extends Data {
    /**
     * Type of the content block
     * maybe only "text"?
     */
    readonly type: "text-plain";
    /**
     * Plaintext content. This is optional if the data is base64 encoded.
     */
    text?: string;
    /**
     * Title of the file, e.g. the title of a document
     */
    title?: string;
    /**
     * Context for the text, e.g. a description or a summary of the text's content
     */
    context?: string;
  }

  /** Content block for file data */
  export interface File extends Data {
    /**
     * Type of the content block
     */
    readonly type: "file";
  }

  export type ContentBlock = Image | Video | Audio | PlainText | File;
}
