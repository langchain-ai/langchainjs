import { ContentBlock } from "./base.js";
import { ToolsContentBlock } from "./tools.js";
import { MultimodalContentBlock } from "./multimodal.js";

/** Content block for citation */
interface Citation extends ContentBlock {
  /**
   * Type of the content block
   */
  readonly type: "citation";
  /**
   * Content block identifier, which can be
   *  - generated by the provider (e.g., an OpenAI citation ID)
   *  - generated by LangChain upon creation
   */
  id?: string;
  /**
   * URL of the document source
   */
  url?: string;
  /**
   * Source document title. For example, the page title for a web page or the title of a paper.
   */
  title?: string;
  /**
   * Start index of the **response text** for which the annotation applies.
   * @see {TextContentBlock.text}
   */
  startIndex?: number;
  /**
   * End index of the **response text** for which the annotation applies.
   * @see {TextContentBlock.text}
   */
  endIndex?: number;
  /**
   * Excerpt of source text being cited.
   */
  citedText?: string;
}

/** Content block for text */
export interface TextContentBlock extends ContentBlock {
  /**
   * Type of the content block
   */
  readonly type: "text";
  /**
   * Content block identifier, which can be either
   *  - generated by the provider (e.g., an OpenAI text block ID)
   *  - generated by LangChain upon creation
   */
  id?: string;
  /**
   * Text content of the block
   */
  text: string;
  /**
   * Cited and other annotations
   */
  annotations?: Citation[];
}

/** Content block for reasoning output */
export interface ReasoningContentBlock extends ContentBlock {
  /**
   * Type of the content block
   */
  readonly type: "reasoning";
  /**
   * The reasoning output identifier, which can be either
   *  - generated by the provider (e.g., an OpenAI reasoning output ID)
   *  - generated by LangChain upon creation
   */
  id?: string;
  /**
   * Reasoning text. Either the thought summary or the raw reasoning text itself.
   * This is often parsed from `<think>` tags in the model's response.
   */
  reasoning: string;
  /**
   * Opaque state handle representation of the model's internal thought process.
   *
   * Maintains the context of the model's thinking across multiple interactions
   * (e.g. multi-turn conversations) since many APIs are stateless.
   *
   * Not to be used to verify authenticity or integrity of the response (`'signature'`).
   *
   * @see {https://ai.google.dev/gemini-api/docs/thinking#signatures}
   */
  thoughtSignature?: string;

  /**
   * Signature of the reasoning content block used to verify **authenticity**.
   *
   * Prevents from modifying or fabricating the model's reasoning process.
   *
   * @see {https://docs.anthropic.com/en/docs/build-with-claude/context-windows#the-context-window-with-extended-thinking-and-tool-use}
   */
  signature?: string;
}

export type StandardContentBlock =
  | ToolsContentBlock
  | MultimodalContentBlock
  | TextContentBlock
  | ReasoningContentBlock;
