// Example Prisma schema using UUID columns
// This demonstrates how to use PostgreSQL UUID type with PrismaVectorStore

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id        String                 @id @default(uuid()) @db.Uuid
  content   String
  namespace String?                @default("default")
  vector    Unsupported("vector")?
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt
}

// You can also use UUID for relations
model Collection {
  id        String                 @id @default(uuid()) @db.Uuid
  name      String
  documents CollectionDocument[]
  createdAt DateTime               @default(now())
}

model CollectionDocument {
  id           String     @id @default(uuid()) @db.Uuid
  collectionId String     @db.Uuid
  documentId   String     @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id])
  document     Document   @relation(fields: [documentId], references: [id])
  
  @@unique([collectionId, documentId])
}

// Add this relation back to Document model
model Document {
  id          String                 @id @default(uuid()) @db.Uuid
  content     String
  namespace   String?                @default("default")
  vector      Unsupported("vector")?
  collections CollectionDocument[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}
