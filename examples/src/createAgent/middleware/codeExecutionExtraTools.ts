/**
 * Example demonstrating Code Execution Middleware with additional tools.
 *
 * This example shows how to combine code execution capabilities with custom tools
 * that can access files generated by code execution. The example creates an
 * email_file tool that reads files from the agent's workspace and demonstrates
 * how tools can interact with code execution outputs.
 */

import { ChatAnthropic } from "@langchain/anthropic";
import { AnthropicContainerProvider } from "@langchain/anthropic/middleware";
import { HumanMessage } from "@langchain/core/messages";
import { getCurrentTaskInput } from "@langchain/langgraph";
import {
  codeExecutionMiddleware,
  createAgent,
  MemoryFileProvider,
  tool,
  type CodeExecutionMiddlewareState,
} from "langchain";
import fs from "node:fs/promises";
import { z } from "zod";

// Initial setup
const model = new ChatAnthropic({
  model: "claude-sonnet-4-5-20250929",
});

const middleware = codeExecutionMiddleware(
  new AnthropicContainerProvider(),
  new MemoryFileProvider()
);

const emailTool = tool(
  async ({ path }, config) => {
    // Access the current agent state using getCurrentTaskInput
    const state = getCurrentTaskInput<CodeExecutionMiddlewareState>(config);

    // Find the file using the middleware's files method
    const file = middleware.files(state).find((f) => f.path === path);

    if (!file) {
      return `Error: File not found at path: ${path}`;
    }

    // Get the file content
    const content = await file.getContent();

    // Simulate emailing the file
    console.log("Pretending to email file with content:");
    console.log(content.toString());

    return `Successfully emailed file: ${path}`;
  },
  {
    name: "email_file",
    description:
      "Email a file by providing its path. The file must exist in the agent's workspace.",
    schema: z.object({
      path: z.string().describe("The path to the file to email"),
    }),
  }
);

const agent = createAgent({
  model,
  middleware: [middleware],
  tools: [emailTool],
});

// Read and add the test data file
const testDataPath = "test_data.csv";
const fileContent = await fs.readFile(testDataPath);

await agent.invoke({
  messages: new HumanMessage(
    "Turn this into a markdown file with a table and then email it."
  ),
  files: [await middleware.addFile(testDataPath, fileContent)],
});
