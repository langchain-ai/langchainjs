import fs from "node:fs";
import { resolve } from "node:path";
import { Options as BuildOptions } from "tsdown";
import { type PackageJson } from "type-fest";
import { extname } from "node:path";
import { barrelDtsPlugin } from "./plugins/barrel-dts";

export {
  type ImportConstantsPluginOptions,
  importConstantsPlugin,
} from "./plugins/import-constants";
export {
  type ImportMapPluginOptions,
  importMapPlugin,
} from "./plugins/import-map";
export {
  type SecretPluginOptions,
  lcSecretsPlugin,
} from "./plugins/lc-secrets";
export {
  type BarrelDtsPluginOptions,
  barrelDtsPlugin,
} from "./plugins/barrel-dts";

/**
 * Extracts entry point paths from a package.json exports field.
 * Filters out entries with file extensions and returns only the input paths.
 */
export function getPackageEntrypoints(pkg: PackageJson): string[] {
  if (!pkg.exports) {
    return [];
  }

  const exportEntries = Object.entries(pkg.exports).filter(
    ([exportPath]) => !extname(exportPath)
  ) as [string, PackageJson.ExportConditions][];

  const entrypoints = exportEntries
    .map(([, conditions]) => conditions.input)
    .filter(Boolean) as string[];

  return entrypoints;
}

/**
 * Creates a standardized tsdown build configuration for LangChain packages.
 *
 * This function generates a build configuration with sensible defaults for building
 * LangChain packages, including:
 * - Dual format output (CommonJS and ESM)
 * - TypeScript declaration files
 * - Source maps
 * - Validation via ATTW, publint, and unused exports checking
 *
 * @param options - Optional partial build options to override defaults
 * @returns A complete tsdown build configuration object
 *
 * @example
 * ```ts
 * import { defineConfig } from "tsdown";
 * import { getBuildConfig } from "@langchain/build";
 *
 * export default defineConfig(getBuildConfig());
 * ```
 *
 * @example
 * ```ts
 * import { defineConfig } from "tsdown";
 * import { getBuildConfig } from "@langchain/build";
 *
 * export default defineConfig(
 *   getBuildConfig({
 *     plugins: [myCustomPlugin()],
 *   })
 * );
 * ```
 */
export function getBuildConfig(options?: Partial<BuildOptions>): BuildOptions {
  // Read package.json from current working directory
  const packagePath = process.cwd();
  const packageJsonPath = resolve(packagePath, "package.json");
  const pkg = JSON.parse(
    fs.readFileSync(packageJsonPath, "utf-8")
  ) as PackageJson;

  const pluginOption = Array.isArray(options?.plugins)
    ? options.plugins
    : [options?.plugins];

  return {
    entry: getPackageEntrypoints(pkg),
    format: ["cjs", "esm"],
    target: "es2022",
    platform: "node",
    dts: true,
    sourcemap: true,
    unbundle: true,
    attw: {
      profile: "node16",
      level: "error",
    },
    publint: {
      level: "error",
      strict: true,
    },
    unused: {
      level: "error",
    },
    ignoreWatch: [
      `.turbo`,
      `dist`,
      `node_modules`,
      // ignore files that are generated by plugins
      `src/load/import_constants.ts`,
      `src/load/import_map.ts`,
      `src/load/import_type.ts`,
    ],
    plugins: [
      ...pluginOption,
      barrelDtsPlugin({
        updatePackageJson: true,
        additionalFiles: ["dist/", "CHANGELOG.md", "README.md", "LICENSE"],
      }),
    ],
  };
}
